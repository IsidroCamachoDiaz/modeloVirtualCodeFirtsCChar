// <auto-generated />
using System;
using DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DB.Migrations
{
    [DbContext(typeof(gestorBibliotecaContext))]
    partial class gestorBibliotecaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("DB.Acceso", b =>
                {
                    b.Property<long>("id_acceso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("id_acceso"));

                    b.Property<string>("codigo_acceso")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("descipcion_acceso")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id_acceso");

                    b.ToTable("Accesos");
                });

            modelBuilder.Entity("DB.Autor", b =>
                {
                    b.Property<long>("id_autor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("id_autor"));

                    b.Property<string>("apellidos_autor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("nombre_autor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id_autor");

                    b.ToTable("Autores");
                });

            modelBuilder.Entity("DB.Coleccion", b =>
                {
                    b.Property<long>("id_coleccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("id_coleccion"));

                    b.Property<string>("nombre_coleccion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id_coleccion");

                    b.ToTable("Colecciones");
                });

            modelBuilder.Entity("DB.Editorial", b =>
                {
                    b.Property<long>("id_editorial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("id_editorial"));

                    b.Property<string>("nombre_editorial")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id_editorial");

                    b.ToTable("Editoriales");
                });

            modelBuilder.Entity("DB.Estado_Prestamo", b =>
                {
                    b.Property<long>("id_estado_prestamo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("id_estado_prestamo"));

                    b.Property<long?>("Estado_Prestamoid_estado_prestamo")
                        .HasColumnType("bigint");

                    b.Property<string>("codigo_estado_prestamo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("descripcion_estado_prestamo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id_estado_prestamo");

                    b.HasIndex("Estado_Prestamoid_estado_prestamo");

                    b.ToTable("Estados_Prestamos");
                });

            modelBuilder.Entity("DB.Genero", b =>
                {
                    b.Property<long>("id_genero")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("id_genero"));

                    b.Property<string>("descripcion_genero")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("nombre_genero")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id_genero");

                    b.ToTable("Generos");
                });

            modelBuilder.Entity("DB.Libro", b =>
                {
                    b.Property<long>("id_libro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("id_libro"));

                    b.Property<long>("coleccionid_coleccion")
                        .HasColumnType("bigint");

                    b.Property<string>("edicion_libro")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("editorialid_editorial")
                        .HasColumnType("bigint");

                    b.Property<long>("generoid_genero")
                        .HasColumnType("bigint");

                    b.Property<long>("id_coleccion")
                        .HasColumnType("bigint");

                    b.Property<long>("id_editorial")
                        .HasColumnType("bigint");

                    b.Property<long>("id_genero")
                        .HasColumnType("bigint");

                    b.Property<string>("isbn_libro")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("titulo_libro")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id_libro");

                    b.HasIndex("coleccionid_coleccion");

                    b.HasIndex("editorialid_editorial");

                    b.HasIndex("generoid_genero");

                    b.ToTable("Libros");
                });

            modelBuilder.Entity("DB.Prestamo", b =>
                {
                    b.Property<long>("id_prestamo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("id_prestamo"));

                    b.Property<long>("estado_prestamoid_estado_prestamo")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("fch_entrega_prestamo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("fch_fin_prestamo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("fch_inicio_prestamo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("id_estado_prestamo")
                        .HasColumnType("bigint");

                    b.Property<long>("id_libro")
                        .HasColumnType("bigint");

                    b.Property<long>("id_usuario")
                        .HasColumnType("bigint");

                    b.Property<long>("libroid_libro")
                        .HasColumnType("bigint");

                    b.Property<long>("usuarioid_usuario")
                        .HasColumnType("bigint");

                    b.HasKey("id_prestamo");

                    b.HasIndex("estado_prestamoid_estado_prestamo");

                    b.HasIndex("libroid_libro");

                    b.HasIndex("usuarioid_usuario");

                    b.ToTable("Prestamos");
                });

            modelBuilder.Entity("DB.Rel_Autores_Libros", b =>
                {
                    b.Property<long>("id_rel_autores_libros")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("id_rel_autores_libros"));

                    b.Property<long>("autorid_autor")
                        .HasColumnType("bigint");

                    b.Property<long>("id_autor")
                        .HasColumnType("bigint");

                    b.Property<long>("id_libro")
                        .HasColumnType("bigint");

                    b.Property<long>("libroid_libro")
                        .HasColumnType("bigint");

                    b.HasKey("id_rel_autores_libros");

                    b.HasIndex("autorid_autor");

                    b.HasIndex("libroid_libro");

                    b.ToTable("Rel_Autores_Libros");
                });

            modelBuilder.Entity("DB.Usuario", b =>
                {
                    b.Property<long>("id_usuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("id_usuario"));

                    b.Property<long?>("Usuarioid_usuario")
                        .HasColumnType("bigint");

                    b.Property<long>("accesoid_acceso")
                        .HasColumnType("bigint");

                    b.Property<string>("apellidos_usuario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("clave_usuario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("dni_usuario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("email_usuario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("estaBloqueado_usuario")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("fch_alta_usuario")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("fch_baja_usuario")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("fch_fin_bloqueo_usuario")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("id_acceso")
                        .HasColumnType("bigint");

                    b.Property<string>("nombre_usuario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("tlf_usuario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id_usuario");

                    b.HasIndex("Usuarioid_usuario");

                    b.HasIndex("accesoid_acceso");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("DB.Estado_Prestamo", b =>
                {
                    b.HasOne("DB.Estado_Prestamo", null)
                        .WithMany("prestamos")
                        .HasForeignKey("Estado_Prestamoid_estado_prestamo");
                });

            modelBuilder.Entity("DB.Libro", b =>
                {
                    b.HasOne("DB.Coleccion", "coleccion")
                        .WithMany("libros")
                        .HasForeignKey("coleccionid_coleccion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Editorial", "editorial")
                        .WithMany("libros")
                        .HasForeignKey("editorialid_editorial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Genero", "genero")
                        .WithMany("libros")
                        .HasForeignKey("generoid_genero")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("coleccion");

                    b.Navigation("editorial");

                    b.Navigation("genero");
                });

            modelBuilder.Entity("DB.Prestamo", b =>
                {
                    b.HasOne("DB.Estado_Prestamo", "estado_prestamo")
                        .WithMany()
                        .HasForeignKey("estado_prestamoid_estado_prestamo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Libro", "libro")
                        .WithMany()
                        .HasForeignKey("libroid_libro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Usuario", "usuario")
                        .WithMany()
                        .HasForeignKey("usuarioid_usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("estado_prestamo");

                    b.Navigation("libro");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("DB.Rel_Autores_Libros", b =>
                {
                    b.HasOne("DB.Autor", "autor")
                        .WithMany("rel_autores_libros")
                        .HasForeignKey("autorid_autor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Libro", "libro")
                        .WithMany("rel_autores_libros")
                        .HasForeignKey("libroid_libro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("autor");

                    b.Navigation("libro");
                });

            modelBuilder.Entity("DB.Usuario", b =>
                {
                    b.HasOne("DB.Usuario", null)
                        .WithMany("usuarios")
                        .HasForeignKey("Usuarioid_usuario");

                    b.HasOne("DB.Acceso", "acceso")
                        .WithMany("usuarios")
                        .HasForeignKey("accesoid_acceso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("acceso");
                });

            modelBuilder.Entity("DB.Acceso", b =>
                {
                    b.Navigation("usuarios");
                });

            modelBuilder.Entity("DB.Autor", b =>
                {
                    b.Navigation("rel_autores_libros");
                });

            modelBuilder.Entity("DB.Coleccion", b =>
                {
                    b.Navigation("libros");
                });

            modelBuilder.Entity("DB.Editorial", b =>
                {
                    b.Navigation("libros");
                });

            modelBuilder.Entity("DB.Estado_Prestamo", b =>
                {
                    b.Navigation("prestamos");
                });

            modelBuilder.Entity("DB.Genero", b =>
                {
                    b.Navigation("libros");
                });

            modelBuilder.Entity("DB.Libro", b =>
                {
                    b.Navigation("rel_autores_libros");
                });

            modelBuilder.Entity("DB.Usuario", b =>
                {
                    b.Navigation("usuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
